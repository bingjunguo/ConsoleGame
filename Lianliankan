// lianliankan.cpp : 定义控制台应用程序的入口点。
//
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <time.h>

using namespace std;
typedef vector<vector<int> > V2D;
enum {cell = 0,star,yuan,sanjiao};
class Game
{
	V2D map;
	static const int width = 18;
	static const int high = 18;
	bool LineCheck(int row1,int col1,int row2,int col2);
	bool PointCheck(int row1,int col1,int row2,int col2);
	void PrintMap();
	void PrintHead();
public:
	void Start();
	Game();
};

Game::Game()
{
	srand((unsigned)time(NULL));
	map.resize(high);
	for (int i = 0;i<high;i++)
	{
		map[i].resize(width);
		for (int j = 0;j<width;j++)
		{
			if (i == 0 || i == high-1 || j == 0 || j == width-1)
				map[i][j] = cell;
			else
				map[i][j] = rand()%4;
		}
	}
}
void Print(int i)
{
	if (i>9)
		cout<<i;
	else
		cout<<i<<" ";
}
void Game::PrintHead()
{
	cout<<"  ";
	for (int i = 1;i<=width;i++)
	{
		Print(i);
	}
	cout<<endl;
}
void Game::Start()
{
	int row1,row2,col1,col2;
	PrintMap();
	while(1)
	{
		cout<<"输入第一个点行号列号，以空格分开，回车结束：";
		cin>>row1>>col1;
		cout<<"输入第二个点行号列号，以空格分开，回车结束：";
		cin>>row2>>col2;
		row1--;col1--;row2--;col2--;
		if (PointCheck(row1,col1,row2,col2))
		{
			map[row1][col1] = map[row2][col2] = cell;
			system("cls");
			PrintMap();
			cout<<"两点连通,已消除!"<<endl;
		}
		else
		{
			cout<<"两点无法连通或类型不匹配!"<<endl;
		}
	}
}
void swap(int &x,int &y)
{
	int t = x;
	x = y;
	y = t;
}
//判断两点直线是否能通
bool Game::LineCheck(int row1,int col1,int row2,int col2)
{
	if (row1 == row2)
	{
		if (col1>col2)
			swap(col1,col2);
		for (int j = col1+1;j<col2;j++)
		{
			if (map[row1][j]!=cell)
				return false;
		}
		return true;
	}
	else if (col1 == col2)
	{
		if (row1>row2)
			swap(row1,row2);
		for (int i = row1+1;i<row2;i++)
		{
			if (map[i][col1]!=cell)
				return false;
		}
		return true;
	}
	return false;
}
//正式判断两点是否可以连通并且类型相同
bool Game::PointCheck(int row1,int col1,int row2,int col2)
{
	if (map[row1][col1] != map[row2][col2])
		return false;
	//列固定 遍历行
	for (int i = 0;i<high;i++)
	{
		if (map[i][col1] == cell && map[i][col2] == cell)
		{
			if (LineCheck(row1,col1,i,col1)&&LineCheck(i,col1,i,col2)&&LineCheck(i,col2,row2,col2))
			{
				return true;
			}
		}
	}
	//行固定 遍历列
	for (int j = 0;j<width;j++)
	{
		if (map[row1][j] == cell && map[row2][j] == cell)
		{
			if (LineCheck(row1,col1,row1,j)&&LineCheck(row1,j,row2,j)&&LineCheck(row2,j,row2,col2))
			{
				return true;
			}
		}
	}
	return false;
}
void Game::PrintMap()
{
	PrintHead();
	for (int i = 0;i<high;i++)
	{
		Print(i+1);
		for (int j = 0;j<width;j++)
		{
			switch(map[i][j])
			{
			case cell:
				cout<<"□";
				break;
			case star:
				cout<<"★";
				break;
			case yuan:
				cout<<"●";
				break;
			case sanjiao:
				cout<<"▲";
				break;
			}
		}
		cout<<endl;
	}
}

int main()
{
	Game game;
	game.Start();
	getchar();
	return 0;
}

